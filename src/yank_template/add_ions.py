#!/usr/bin/env python3
#

## Is the molecule/system neutral ?
# If not then add ions
# Else exit with simple no
## Run packmol script to add ions
#First check the charge of molecule/system
# Run in subprocess $PACKMOL <ion_box.inp >ion_box.out


#```
#    Check the syscharge file in the structre dir. If neutral molecule then don't add charge else check if positive
#    or negative and add correct counter ion (CLA/POT) or ask for counter-ion name.
#```

# Imports
import os
import subprocess
from openmm.app import *

# Remote zaratan
PACKMOL="/home/jbodosa/scratch/data/exec/packmol/packmol"
CHARMM="/home/jbodosa/scratch/data/exec/gnu/charmm"

## Local M1
#PACKMOL="/Users/jbodosa/Documents/UMD/Rotation/Lab/Work/data/packages/packmol-20.14.4-docs1/packmol"
#CHARMM="/Users/jbodosa/Documents/UMD/Rotation/Lab/Work/data/packages/gnu/charmm"

class SysGen:
    def __init__(self):
        """
            Read charge input file and output the charge.
        """
        pass
    ### Module to read and output the charge from charge_path
    ##def get_charge(self):
    ##    try:
    ##        with open(self.file_path, 'r') as f:
    ##            charge=f.read()
    ##        return(charge)
    ##    except FileNotFoundError:
    ##        return("{file} does not exit.".format(file=self.file_path))
    ##    except Exception as e:
    ##        return("Got error : {str(e)}".format(e=e))

    ###############
    ###############
    #   READERS     #
    ###############
    ###############

    # Read the PDB file generated by any software
    def read_pdb(self, pdb_file):
        """
          Read the pdb file into openmm.
          :param pdb_file: path to the pdb file
          :param box_dim: (a,b,c) tuple of box edges
          :param box_dim_unit: Angstrom or nanometer unit
        """
        #self.pdb_file = pdb_file
        #self.box_dim = box_dim
        #self.box_dim_unit = box_dim_unit

        try:
            pdb = PDBFile(pdb_file)
            self.pdb = pdb
            return(pdb)
        except FileNotFoundError:
            return("{file} does not exist.".format(file=pdb_file))
        except Exception as e:
            return("Got error : {str(e)}".format(e=e))

    # Read the CRD file generated by any software
    def read_crd(self, crd_file):
        """
          Read the crd file into openmm.
          :param crd_file: path to the crd file
        """

        try:
            crd = charmmcrdfiles.CharmmCrdFile(crd_file)
            self.crd = crd
            return f"CRD file read from '{crd_file}'"
        except FileNotFoundError:
            return("{file} does not exist.".format(file=crd_file))
        except Exception as e:
            return("Got error : {str(e)}".format(e=e))

    # Read the PSD file generated by any software
    def read_psf(self, psf_file):
        """
          Read the psf file into openmm.
          :param psf_file: path to the psf file
        """

        try:
            psf = charmmcrdfiles.CharmmPsfFile(psf_file)
            self.psf = psf
            return f"PSF file read from '{psf_file}'"
        except FileNotFoundError:
            return("{file} does not exist.".format(file=psf_file))
        except Exception as e:
            return("Got error : {str(e)}".format(e=e))

    # Create a CHARMM crd file from any pdb
    def write_crd(self, output_path, use_CHARMM=False):
        """
            Read the pdb file and write out the crd file.
        """
        try:
            if not use_CHARMM:
                pdb = self.pdb
                if isinstance(pdb, PDBFile):
                    with open(output_path, 'w') as crd_file:
                        # Write the CRD file header
                        crd_file.write(f"* CHARMM Coordinate File\n")
                        crd_file.write(f"* Generated by SysGen\n")
                        crd_file.write(f"*\n")
                        # "NUMATOMS_EXT": "{0:10d} EXT\n",
                        crd_file.write(f"{len(list(pdb.topology.atoms())):10d}  EXT\n")

                        # Write the atomic data
                        for i, atom in enumerate(pdb.topology.atoms()):
                            position = pdb.positions[i]
                            segid = getattr(atom.residue, 'id', 'HETATOM')

                            # Picked the format from MDAnalysis
                            # https://docs.mdanalysis.org/1.1.0/_modules/MDAnalysis/coordinates/CRD.html#CRDWriter
                            #
                            # "ATOM_EXT": ("{serial:10d}{totRes:10d}  {resname:<8.8s}  {name:<8.8s}"
                            # "{pos[0]:20.10f}{pos[1]:20.10f}{pos[2]:20.10f}  "
                            # "{chainID:<8.8s}  {resSeq:<8d}{tempfactor:20.10f}\n"),
                            #
                            # The resname and segname are wrong
                            crd_file.write(f"{i + 1:10d}{atom.residue.index + 1:10d}  {atom.residue.name:<8.8s}  {atom.name:<8.8s}{position.x:>20.10f}{position.y:20.10f}{position.z:20.10f}  {segid:<8.8s}  {atom.residue.index + 1:<8d}{0:20.10f}\n")
                crd_file.close()
                return f"CRD file written to '{output_path}'"
        except FileNotFoundError:
            return("{file} does not exist.".format(file=pdb_file))
        except Exception as e:
            return("Got error : {str(e)}".format(e=e))

        # Create a CHARMM psf file from a crd
    def write_psf(self, output_path):
        """
            Write out the psf file for the given crd file.
        """

        try:
            crd = self.crd
            if isinstance(crd, charmmcrdfiles.CharmmCrdFile):
                try:
                    # Call CHARMM to write the psf file
                    #command = "echo '"+CHARMM+" < ion_wat.inp > ion_wat.out'"
                    command = CHARMM+" < ion_box.inp > ion_box.out"
                    result = subprocess.run(command, shell=True, executable="/bin/bash",  capture_output=True, text=True, check=True)
                    print(result.stdout)
                except subprocess.CalledProcessError as e:
                    print(f"Command failed with return code {e.returncode}")
                    print(f"Error output: {e.stderr}")
        except FileNotFoundError:
            return("{file} does not exist.".format(file=crd_file))
        except Exception as e:
            return("Got error : {str(e)}".format(e=e))


# Example usage:
file_reader = SysGen()
#pdb = file_reader.read_pdb(pdb_file = '../meso/meso.pdb') #, box_dim=60, box_dim_unit="Ang")
crd = file_reader.read_crd(crd_file = 'output.crd')
#crd_status = file_reader.write_crd('output.crd', use_CHARMM=False)
psf = file_reader.write_psf('output.psf')

