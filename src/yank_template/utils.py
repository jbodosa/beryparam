### Util scripts

# Imports
#
import os
import subprocess
from datetime import datetime, timezone


### Writing a CHARMM input file

### Write the mol recenter script

def write_charmm_inp():
    output_file = "recenter.inp"

    with open(output_file, 'w') as inp:
        # Get username
        user = os.getenv('USERNAME') or os.getenv('USER')
        # Get current UTC date and time
        current_utc = datetime.now(timezone.utc)

        inp.write(f"* GENERATED BY SYSGEN\n")
        inp.write(f"* THIS IS TO RECENTER THE SYS AND GET CHARMM COMPATIBLE PDB/PSF/CRD\n")
        inp.write(f"* Made by {user} on {current_utc}\n")
        inp.write(f"* \n")
        inp.write(f"* \n")
        inp.write(f"bomlev -3 \n")
        inp.write(f"DIMENS CHSIZE 2000000\n")
        inp.write(f"! Read system size \n")
        inp.write(f"stream sys_size.str \n")
        inp.write(f"! Read charmm ff files \n")
        inp.write(f"stream toppar.str \n")
        inp.write(f" \n")
        inp.write(f" \n")
        inp.write(f"! Read in the mol/sys \n")
        inp.write(f"read sequence MGLYOL 1 \n")
        inp.write(f"generate MGLYOL \n")
        inp.close()

write_charmm_inp()



! Read the CAL
read sequence CAL 1
generate CAL


! Read the CLA
read sequence CLA 2
generate CLA noang nodihed

open read unit 10 card name cal_cla.pdb
read coor pdb unit 10 resid

define solute sele segid CAL .or. segid CLA end
cons harm absolute force 1.0 sele solute end

define PTOT sele .not. hydrogen end


open write unit 10 card name cal_cla_vac.crd
write coor unit 10 card


open write unit 10 card name cal_cla_vac.pdb
write coor pdb unit 10


open write unit 10 card name cal_cla_vac.psf
write  psf card unit 10


