
# Imports
import os
from pathlib import Path
import subprocess
import shutil
import logging

#from utils.recenter_crd import recenter_crd
from utils.write_recenter_inp import write_recenter_inp
from utils.write_psf_inp import write_psf_inp
from utils.write_getcharge_inp import write_getcharge_inp
from utils.write_ion_charmm_inp import write_ion_charmm_inp

from openmm.app import *

from parse_param import *

CHARMM="/Users/jbodosa/Documents/UMD/Rotation/Lab/Work/data/packages/gnu/c49/charmm/bin/charmm"

####################
####################
# System (class) #
####################
####################

logger = logging.getLogger(__name__)

class System:
    def __init__(self):
        """
            System class which has all the attributes.
        """
        #logger = logging.getLogger(__name__)
        logger.info("Set attributes of system.")
        # Default attributes
        #
        # Coordinate files
        self.pdb = None
        self.crd = None
        # Connectivity files
        self.psf = None

        # Can be defined in sys_param
        self.positive_ion = None
        self.negative_ion = None
        self.ncharge = None
        self.forcefield = None

    ###########################
    # Add custom params to system #
    ###########################

        try:
            param_dict = parse_param("sys_param.str")
            logger.debug(param_dict)
            for key, value in param_dict.items():
                logger.debug(str(key)+" " +str(value))
                setattr(self, key, value)
            logger.info(param_dict)
        except Exception as e:
            logger.info(f"{e}")

    ###############
    ###############
    #   READERS     #
    ###############
    ###############

    # Read the PDB file generated by any software
    def read_pdb(self, pdb_file):
        """
        Set the pdb attr to the pdb file.
        """
        pdb = pdb_file
        if Path(pdb).exists():
            self.pdb = pdb
            logger.info("Loaded pdb.")
        else:
            logger.info("PDB file does not exist.")

    # Read the CRD file generated by any software
    def read_crd(self, crd_file):
        """
        Set the crd attr to the crd file.
        """
        crd = crd_file
        if Path(crd).exists():
            self.crd = crd
            logger.info("Loaded crd.")
        else:
            logger.info("CRD file does not exist.")

    # Read the psf file generated by any software
    def read_psf(self, psf_file):
        """
        Set the psf attr to the psf file.
        """
        psf = psf_file
        if Path(psf).exists():
            self.psf = psf
            logger.info("Loaded psf.")
        else:
            logger.info("PSF file does not exist.")


    ###############
    ###############
    #   WRITERS   #
    ###############
    ###############

    # Write the pdb file generated by any software
    def write_pdb(self, pdb_outfile):
        """
        Write the pdb file to pdb_outfile.
        """
        if self.pdb: # FIX check if psf or crd exists
        # Create a CHARMM pdb file from any pdb
            # Step 1
            # Write the recenter.inp input
            # Step 2
            # Run CHARMM with recenter.inp and return new pdb

            #recenter_inp = write_recenter_inp("../meso/meso_charmm.pdb","meso_c.pdb", ["MGLYOL"], [1])
            #recenter_pdb = recenter_pdb("test")

        # First recenter the pdb file
                # TODO
                #recenter_pdb(self.pdb)

                ##Write out the psf file for the given crd file.
                #        #try:
                #        #crd = self.crd
                #        #if isinstance(crd, charmmcrdfiles.CharmmCrdFile):
                #        try:
                #            # Call write recenter.inp
                #            recenter_out = write_recenter_inp(mol_resname="MGLYOL", ion_resname=self.counter_ion, ncharge=self.ncharge)
                #            #print(recenter_out)
                #            logger.debug(recenter_out)
                #            # Call CHARMM to recenter the sys and write psf
                #            command = CHARMM+" < recenter.inp > recenter.out"
                #            result = subprocess.run(command, shell=True, executable="/bin/bash",  capture_output=True, text=True, check=True)
                #            return(result.stdout)
                #        except subprocess.CalledProcessError as e:
                #            #print(f"Command failed with return code {e.returncode}")
                #            logger.debug(f"Command failed with return code {e.returncode}")
                #            #print(f"Error output: {e.stderr}")
                #            logger.debug(f"Error output: {e.stderr}")
                #except FileNotFoundError:
                #    return("{file} does not exist.".format(file=crd_file))
                #except Exception as e:
                #    return("Got error : {str(e)}".format(e=e))

            logger.info(f"Wrote pdb to {pdb_outfile}.")
        else:
            logger.info("PDB was not written. Load pdb/crd first.")

    # Write the crd file generated by any software
    def write_crd(self, crd_outfile):
        """
        Write the crd file to crd_outfile.
        """
        if self.crd: # FIX check if psf or crd exists
            logger.info(f"Wrote crd to {crd_outfile}.")
        else:
            logger.info("CRD was not written. Load pdb/crd first.")

    # Write the psf file generated by any software
    def write_psf(self, psf_outfile, crd_infile=""):
        """
        Write the psf file to psf_outfile.
        """
        if not self.crd : # FIX check if psf or crd exists
            self.crd = crd_infile

        write_psf_inp(str(self.crd),psf_outfile, self.mol_list, self.mol_n)
        # Call CHARMM to recenter the sys and write psf
        command = CHARMM+" < psf.inp > psf.out"
        result = subprocess.run(command, shell=True, executable="/bin/bash",  capture_output=True, text=True, check=True)
        self.psf = psf_outfile
        return(result.stdout)

    # Create a CHARMM crd file from any pdb
    def convert_pdb2crd(self, output_path, use_CHARMM=False, resname_fix=True, resname_old_list=list(), resname_new_list=list()):
        """
            Read the pdb file and write out the crd file.
        """
        try:
            if not use_CHARMM:
                pdb_omm = PDBFile(self.pdb)

                if resname_fix and len(resname_old_list) != 0:
                    resname_dict = {}
                    for resname_old, resname_new in zip(resname_old_list, resname_new_list):
                        resname_dict[resname_old] = resname_new

                with open(output_path, 'w') as crd_file:
                    # Write the CRD file header
                    crd_file.write(f"* CHARMM Coordinate File\n")
                    crd_file.write(f"* Generated by sysgen\n")
                    crd_file.write(f"*\n")
                    # "NUMATOMS_EXT": "{0:10d} EXT\n",
                    crd_file.write(f"{len(list(pdb_omm.topology.atoms())):10d}  EXT\n")

                    # Write the atomic data
                    for i, atom in enumerate(pdb_omm.topology.atoms()):
                        position = pdb_omm.positions[i]
                        #logger.debug(position)
                        #logger.debug(atom)

                        # Picked the format from MDAnalysis
                        # https://docs.mdanalysis.org/1.1.0/_modules/MDAnalysis/coordinates/CRD.html#CRDWriter
                        #
                        if resname_fix:
                            segid = atom.residue.name
                            if segid in resname_dict.keys():
                                atom.residue.name = resname_dict[segid]
                                atom.residue.id = resname_dict[segid]
                                # Convert the positions from nanom to Angs
                        crd_file.write(f"{i + 1:10d}{atom.residue.index + 1:10d}  {atom.residue.name:<8.8s}  {atom.name:<8.8s}{position.x*10:>20.10f}{position.y*10:20.10f}{position.z*10:20.10f}  {atom.residue.id:<8.8s}  {atom.residue.index + 1:<8d}{0:20.10f}\n")
                crd_file.close()
                return f"CRD file written to '{output_path}'"
        except FileNotFoundError:
            return("{file} does not exist.".format(file=self.pdb))
        except Exception as e:
            return(f"Got error : {e}")

    def recenter_crd(self, crd_infile=""):
        """
        Recenter the self.crd and return the recntered crd.
        """
        try:
            if self.crd != None:
                logger.debug(f"self.crd exists : {self.crd}")
            else:
                self.crd = crd_infile
                logger.debug(f"self.crd does not exist. Setting it to: {crd_infile}")

            write_recenter_inp(str(self.crd),"recenter.crd", self.mol_list, self.mol_n)
            # Call CHARMM to recenter the sys and write psf
            command = CHARMM+" < recenter.inp > recenter.out"
            result = subprocess.run(command, shell=True, executable="/bin/bash",  capture_output=True, text=True, check=True)
            # FIX crd_outfile
            self.crd = "recenter.crd"
            return(result.stdout)
        except Exception as e:
            raise e
        logger.debug("Ran recenter_crd")
        return()

    def add_ions(self, ref_sel, rdist, ion_segid):

        # Check the charge
        if self.ncharge is None:
            logger.debug("ncharge is None")
            # Write the inp to read psf and crd and check ncharge
            # and add appropriate counter-ions
            write_getcharge_inp(self.crd, self.psf)
            # Call CHARMM to recenter the sys and write psf
            command = CHARMM+" < ions.inp > ions.out"
            result = subprocess.run(command, shell=True, executable="/bin/bash",  capture_output=True, text=True, check=True)
            # Output is psf_param.str
            psf_param_dict = parse_param("psf_param.str")
            logger.debug(psf_param_dict)
            for key, value in psf_param_dict.items():
                logger.debug(str(key)+" " +str(value))
                setattr(self, key, value)
            #logger.debug(psf_param_dict)
            #logger.debug("ncharge: " +self.ncharge)
            #logger.debug("xmax: "+self.xmax)

            # FIX TODO
        if self.ncharge == 0:
            logger.debug("ncharge: " + str(self.ncharge))
            logger.debug("counter_ion : None" )
            logger.info("System neutral no ions added." )
        elif self.ncharge >0: # Add negative ions
            logger.debug("ncharge: " +str(self.ncharge))
            logger.debug("counter_ion : "+ self.negative_ion )
            write_ion_charmm_inp(self.crd, self.psf,ref_sel= "P1",rdist= 20.0, ion_segid=self.negative_ion )
        elif self.ncharge <0: # Add positive ions
            logger.debug("ncharge: " + str(self.ncharge))
            logger.debug("counter_ion : "+ self.positive_ion )
            write_ion_charmm_inp(self.crd, self.psf,ref_sel= "P1",rdist= 20.0, ion_segid=self.positive_ion )

            # TODO add approp ions
        #write_ion_charmm_inp(self.crd, self.psf,ref_sel= "P1",rdist= 20.0, ion_segid="POT" )

        return()



