import os
from datetime import datetime, timezone
import logging


logger = logging.getLogger(__name__)

ION_LIST = ["SOD", "POT", "CAL","CLA"]
#####################################
# CHARMM inp file to write psf #
#####################################

### Writing a CHARMM input file
### Write the mol psf script
def write_ion_charmm_inp(crd_infile, psf_infile, ref_sel, rdist, ion_segid ):
    output_file = "ion_c.inp"

    with open(output_file, 'w') as inp:
        # Get username
        user = os.getenv('USERNAME') or os.getenv('USER')
        # Get current UTC date and time
        current_utc = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M")

        inp.write(f"* GENERATED BY SYSGEN\n")
        inp.write(f"* THIS IS TO WRITE THE CHARMM INP FOR ADDING ION \n")
        inp.write(f"* Made by {user} on {current_utc}\n")
        inp.write(f"* \n")
        inp.write(f"\n")
        inp.write(f"DIMENS CHSIZE 5000000 MAXRES 3000000\n")
        inp.write(f"\n")
        inp.write(f"! Load topology and parameter files\n")
        inp.write(f"stream toppar.str\n")
        inp.write(f"\n")
        inp.write(f"! Read in the PSF and coordinate files\n")
        inp.write(f"open read card unit 10 name {psf_infile}\n")
        inp.write(f"read psf card unit 10\n")
        inp.write(f"close unit 10\n")
        inp.write(f"\n")
        inp.write(f"open read card unit 20 name {crd_infile}\n")
        inp.write(f"read coor card unit 20\n")
        inp.write(f"close unit 20\n")
        inp.write(f"\n")
        inp.write(f"! Print current coordinates for verification\n")
        inp.write(f"coor stat\n")
        inp.write(f"\n")
        inp.write(f"! Define a reference point (e.g., center of a residue or atom ID)\n")
        inp.write(f"define reference sele resid 1 .and. type {ref_sel} end\n")
        inp.write(f"\n")
        inp.write(f"! Calculate the coordinates of the reference point\n")
        inp.write(f"coor stat sele reference end\n")
        inp.write(f"set refx = ?XAVE\n")
        inp.write(f"set refy = ?YAVE\n")
        inp.write(f"set refz = ?ZAVE\n")
        inp.write(f"\n")
        inp.write(f"! Add the ion\n")
        inp.write(f"! Define the position 20 Ã… (2 nm) away from the reference point along the x-axis\n")
        inp.write(f"calc ionx = @refx + {rdist}\n")
        inp.write(f"calc iony = @refy\n")
        inp.write(f"calc ionz = @refz\n")
        inp.write(f"\n")
        inp.write(f"! Create a new segment for the ion\n")
        inp.write(f"read sequence {ion_segid} 1\n")
        inp.write(f"generate {ion_segid} setup\n")
        inp.write(f"\n")
        inp.write(f"! Assign the ion type (e.g., NA+ for sodium ion)\n")
        inp.write(f"coor set xdir @ionx ydir @iony zdir @ionz sele segid {ion_segid} end\n")
        inp.write(f"ic fill preserve\n")
        inp.write(f"ic param\n")
        inp.write(f"ic build\n")
        inp.write(f"\n")
        inp.write(f"! Add ion parameters to the system\n")
        inp.write(f"stream toppar.str\n")
        inp.write(f"\n")
        inp.write(f"! Print new coordinates for verification\n")
        inp.write(f"coor stat\n")
        inp.write(f"\n")
        inp.write(f"! Write the updated PSF and coordinate files\n")
        inp.write(f"open write card unit 30 name updated_system.psf\n")
        inp.write(f"write psf card unit 30\n")
        inp.write(f"close unit 30\n")
        inp.write(f"\n")
        inp.write(f"open write card unit 40 name updated_system.crd\n")
        inp.write(f"write coor card unit 40\n")
        inp.write(f"close unit 40\n")
        inp.write(f"\n")
        inp.write(f"stop\n")

        inp.close()
    return()

